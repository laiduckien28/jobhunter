apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: build-and-deploy
spec:
  workspaces:
  - name: shared-workspace
  params:
  - name: app-name
    type: string
  - name: git-url
    type: string
  - name: git-revision
    type: string
    default: main
  tasks:

  - name: fetch-repository
    taskRef:
      resolver: cluster
      params:
      - name: kind
        value: task
      - name: name
        value: git-clone
      - name: namespace
        value: ac-test
    workspaces:
    - name: output
      workspace: shared-workspace
    params:
    - name: URL
      value: $(params.git-url)
    - name: REVISION
      value: $(params.git-revision)
    - name: DELETE_EXISTING
      value: "true"

  - name: build-and-push
    taskRef:
      resolver: cluster
      params:
      - name: kind
        value: task
      - name: name
        value: buildah
      - name: namespace
        value: ac-test
    workspaces:
    - name: source
      workspace: shared-workspace
    params:
    - name: IMAGE
      value: image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/$(params.app-name):$(context.pipelineRun.uid)
    runAfter:
    - fetch-repository

  - name: apply-manifests
    taskSpec:
      workspaces:
      - name: source
      params:
      - name: IMAGE
        type: string
      steps:
      - name: replace-image
        image: alpine
        script: |
          apk add --no-cache sed
          sed -i "s|IMAGE_PLACEHOLDER|$(params.IMAGE)|g" /workspace/source/deploy/deployment.yaml
      - name: kubectl-apply
        image: bitnami/kubectl
        script: |
          kubectl apply -f /workspace/source/deploy/
    workspaces:
    - name: source
      workspace: shared-workspace
    params:
    - name: IMAGE
      value: image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/$(params.app-name):$(context.pipelineRun.uid)
    runAfter:
    - build-and-push
